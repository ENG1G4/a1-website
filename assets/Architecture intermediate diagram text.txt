@startuml

' Flatten packages
set separator none
package io.github.eng1g4 <<Frame>> {

  class Main extends ApplicationAdapter implements InputProcessor {
    -SpriteBatch batch
    -ShapeRenderer shapeRenderer
    -Texture image
    -boolean isPaused
    -Map map
    -BitmapFont font
    -GlyphLayout glyphLayout
    -OrthographicCamera camera
    -Viewport viewport

    --Overridden from ApplicationAdapter--
    +void create()
    +void resize(int width, int height)
    +void render()
    +void dispose()
    --Overridden from InputProcessor--
    +boolean keyDown(int keycode)
    +boolean keyUp(int keycode)
    +boolean keyTyped(char character)
    +boolean touchDown(int screenX, int screenY, int pointer, int button)
    +boolean touchUp(int screenX, int screenY, int pointer, int button)
    +boolean touchCancelled(int screenX, int screenY, int pointer, int button)
    +boolean touchDragged(int screenX, int screenY, int pointer)
    +boolean mouseMoved(int screenX, int screenY)
    +boolean scrolled(float amountX, float amountY)
    ---
    +void handleInput()
    +void drawPauseText(SpriteBatch batch)

  }

  note right of ApplicationAdapter
    class provided by libGDX
  end note

  note left of InputProcessor
    interface provided by libGDX
  end note

  class Map implements Disposable {
    -int width
    -int height
    -Texture backgroundTexture
    -TextureRegion backgroundRegion
    -float originX
    -float originY
    -float tileWidth
    -float tileHeight
    -float virtualWidth
    -float virtualHeight
    -PlaceableObject objectToPLace
    -ArrayList<PlaceableObject> placeableObjects

    -void drawOnGrid(Consumer<Diamond> consumer, int x, int y)
    -void drawGrid(ShapeRenderer shapeRenderer)
    -void colourCell(ShapeRenderer shapeRenderer, int tileX, int tileY, Color color)
    -void drawHoveredCell(ShapeRenderer shapeRenderer, float mouseWorldX, float mouseWorldY)
    +void handleClickLeft(float worldX, float worldY)
    +void handleClickRight(float worldX, float worldY)
    -void drawBuildings(SpriteBatch batch)
    +void draw(SpriteBatch batch, ShapeRenderer shapeRenderer, float mouseWorldX, float mouseWorldY)
    -int[] screenToTile(float worldX, float worldY)
    +void setTileSizeAndOrigin()
    +void dispose()
  }

  note left of Disposable
    Interface provided by libGDX
  end note

  class Diamond {
      -float x0
      -float y0
      -float x1
      -float y1
      -float x2
      -float y2
      -float x3
      -float y3

      +float x0()
      +float y0()
      +float x1()
      +float y1()
      +float x2()
      +float y2()
      +float x3()
      +float y3()
  }

  note left of Diamond
    This is a Java Record, so public getters are
    automatically created for the 8 fields.
  end note

  package building {


    interface IBuilding {

    }

    class PlaceableObject {
      {static} -HashMap<String, Texture> textureCache
      -Texture texture
      -int width
      -int height
      -int tileX
      -int tileY
      #int getTileX()
      #int getTileY()
      #int getWidth()
      #int getHeight()
      +void setPosition(int tileX, int tileY)
      +void draw(SpriteBatch batch, float originX, float originY, float tileWidth, float tileHeight)
      +void dispose()
    }

    abstract class Building extends PlaceableObject implements IBuilding {

    }

    class Accommodation extends Building {
      {static} -String TEXTURE_PATH
    }

    class SportsCentre extends Building {
      {static} -String TEXTURE_PATH
    }


  }

}

@enduml