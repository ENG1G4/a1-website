@startuml

' Flatten packages
left to right direction
set separator none
package io.github.eng1g4 <<Frame>> {

  class Main extends ApplicationAdapter {
    -SpriteBatch batch
    -ShapeRenderer shapeRenderer
    -Texture image
    -Map map
    -BitmapFont font
    -OrthographicCamera camera
    -Viewport viewport
    -UI ui
    -float mouseX
    -float mouseY
    -GameOverMenu gameOverMenu
    -PauseMenu pauseMenu
    -GameStateManager gameStateManager
    +BuildingManager()
    --Overridden from ApplicationAdapter--
    +void create()
    +void resize(int width, int height)
    +void render()
    +void dispose()
    ---
    -void drawTimeRemaining()
    +void setMouseX(float mouseX)
    +void setMouseY(float mouseY)
  }

  class CountdownTimer {
    -int timeRemaining
    -Timer.Task countdownTimer
   +CountdownTimer(GameStateManager gameStateManager)
   +void start()
   +void stop()
   +String getTimeRemaining()
  }

  class Map implements Disposable {
    -int width
    -int height
    -Texture backgroundTexture
    -float originX
    -float originY
    -float tileWidth
    -float tileHeight
    -float virtualWidth
    -float virtualHeight
    -ArrayList<PlaceableObject> placeableObjects
    -BuildingType selectedBuilding
    -BuildingManager buildingManager
    -ObstacleMap obstacleMap
    -SoundManager soundManager

    +Map(String backgroundTexturePath, int width, int height, float virtualWidth, float virtualHeight, BuildingManager buildingManager)
    -void createObstacleMap()
    -void drawGrid(ShapeRenderer shapeRenderer)
    -void colourCell(ShapeRenderer shapeRenderer, int tileX, int tileY, Color color)
    -void drawHoveredCell(ShapeRenderer shapeRenderer, float mouseWorldX, float mouseWorldY)
    +void handleClickLeft(float worldX, float worldY)
    -void drawObstacles(ShapeRenderer shapeRenderer)
    -void drawBuildings(SpriteBatch batch)
    +void draw(SpriteBatch batch, ShapeRenderer shapeRenderer, float mouseWorldX, float mouseWorldY)
    -int[] screenToTile(float worldX, float worldY)
    -float[] tileToScreen(int tileX, int tileY)
    +void setTileSizeAndOrigin()
    +void selectBuilding(BuildingType buildingType)
    +BuildingType getSelectedBuilding()
    +void dispose()
  }

  class UI {
    -Stage stage
    -Label[] buildingCountText
    -Label buildingSelectionIndexLabel
    -Main main
    -Viewport viewport
    -Camera camera
    -BuildingManager buildingManager

    +UI(Viewport viewport, Map map, BuildingManager buildingManager, GameInputProcessor gameInputProcessor, GameStateManager, gameStateManager)

    -void createPauseButton(Skin skin)
    -void createBuildingButtons(Skin skin)
    -void createBuildingCountLabels(Skin skin)
    -void createSelectedBuildingLabel(Skin skin)
    +void drawBuildingLabels()
    +void draw()
    +void drawPause()
    +void resize(int width, int height)
    +Stage getStage()
  }

  class GameInputProcessor implements InputProcessor {
    -GameStateManager gameStateManager
    -PauseMenu pauseMenu
    -Camera camera
    -Map map
    -Main main
    +GameInputProcessor(GameStateManager gameStateManager, PauseMenu pauseMenu, Camera camera, Map map, Main main)
    --Overridden from InputProcessor--
    +boolean keyDown(int keycode)
    +boolean keyUp(int keycode)
    +boolean keyTyped(char character)
    +boolean touchDown(int screenX, int screenY, int pointer, int button)
    +boolean touchUp(int screenX, int screenY, int pointer, int button)
    +boolean touchCancelled(int screenX, int screenY, int pointer, int button)
    +boolean touchDragged(int screenX, int screenY, int pointer)
    +boolean mouseMoved(int screenX, int screenY)
    +boolean scrolled(float amountX, float amountY)
  }

  class ObstacleMap {
    -float height
    -float width
    -HashSet<Double> obstacles

    +ObstacleMap(float width, float height)

    +void add(int x, int y)
    +void resize(float newWidth, float newHeight)
    +boolean contains(int x, int y)
  }

  class SoundManager implements Disposable {
    -Sound buildingPlacementSound
    -Music backgroundMusic
    -float soundEffectVolume
    -float musicVolume
    +SoundManager()
    +void playBuildingPlacementSound()
    +void playBackgroundMusic()
    +void pauseBackgroundMusic()
    +void setMusicVolume(float volume)
    +void setSoundEffectVolume(float volume)
    +float getSoundEffectVolume()
    +float getMusicVolume()
    +void dispose()
  }

  package building {

    enum BuildingType {
      ACCOMMODATION
      SPORTS_CENTRE
      LECTURE_THEATRE
      RESTAURANT

      ---
      +{static} List<BuildingType> CACHED_VALUES
      +{static} int COUNT
      ---
      -String name
      -int width
      -int height
      -float textureHeight
      -float textureXOffset
      -float textureYOffset
      ---
      +BuildingType(String name, int width, int height, float textureHeight, float textureXOffset, float textureYOffset)
      +String getName()
      +int getWidth()
      +int getHeight()
      +float getTextureHeight()
      +float getXOffset()
      +float getYOffset()
    }

    interface IBuilding {
      +String getName()
    }

    class PlaceableObject extends Rectangle {
      {static} -HashMap<String, Texture> TEXTURE_CACHE
      -Texture texture
      +PlaceableObject(String texturePath, int width, int height, int x, int y)
      +float getTextureHeight()
      +float getXOffset()
      +float getYOffset()
      +void draw(SpriteBatch batch, float originX, float originY, float tileWidth, float tileHeight)
      +void dispose()
    }

    abstract class Building extends PlaceableObject implements IBuilding {
      -BuildingType buildingType
      +BuildingType getBuildingType()
      +Building(String texturePath, int x, int y, BuildingType buildingType)
      --Overridden from PlaceableObject--
      +float getTextureHeight()
      +float getXOffset()
      +float getYOffset()
      --Overridden from IBuilding--
      +String getName()
    }

    class BuildingManager {
      -int[] buildingCount
      +BuildingManager()
      +int getBuildingCount(BuildingType buildingType)
      +void registerBuilding(BuildingType buildingType)
    }

    package impl {
      class Accommodation extends Building {
        {static} -String TEXTURE_PATH
        +Accommodation(int x, int y)
      }

      class LectureTheatre extends Building {
        {static} -String TEXTURE_PATH
        +LectureTheatre(int x, int y)
      }

      class Restaurant extends Building {
        {static} -String TEXTURE_PATH
        +Restaurant(int x, int y)
      }

      class SportsCentre extends Building {
        {static} -String TEXTURE_PATH
        +SportsCentre(int x, int y)
      }
    }

  }

  package menu {
    interface IMenu {
      void draw()
    }

    abstract class Menu implements IMenu {
      #TextHelper textHelper
      +Menu(TextHelper textHelper)
    }

    class PauseMenu extends Menu {
      -GlyphLayout pausedGlyphLayout
      -GlyphLayout creditsGlyphLayout
      -GlyphLayout pauseInstructionGlyphLayout
      -GlyphLayout creditsInstructionGlyphLayout
      -GlyphLayout placingInstructionsGlyphLayout
      -boolean showCredits
      -Viewport viewport
      -Stage pauseStage
      +PauseMenu(TextHelper textHelper, Viewport viewport, GameStateManager gameStateManager)
      +void toggleCredits()
      +Stage getStage()
      +void createPauseButton(GameStateManager gameStateManager, Skin skin)
      +void createVolumeSliders(Skin skin, SoundManager soundManager)
      --Overridden from Menu--
      +void draw()
    }

    class GameOverMenu extends Menu {
      -GlyphLayout gameOverGlyphLayout
      +GameOverMenu(TextHelper textHelper)
      --Overridden from Menu--
      +void draw()
    }
  }

  package state {
    enum GameState {
      PLAYING
      PAUSED
      OVER
      +GameState()
    }

    class GameStateManager {
      -GameState currentState
      -CountdownTimer countdownTimer
      -SoundManager soundManager
      +GameStateManager(SoundManager soundManager)
      +boolean isGameOver()
      +boolean isGamePaused()
      +void togglePaused()
      +void setGameOver()
      +CountdownTImer getCountdownTimer()
    }
  }

  package util {
    class IntPacker {
      +{static} double pack(int x, int y)
    }

    class TextHelper {
      -Viewport viewport
      -SpriteBatch spriteBatch
      -BitmapFont font
      +TextHelper(Viewport viewport, SpriteBatch spriteBatch, BitmapFont font)
      +void drawCentredGlyphLayout(GlyphLayout glyphLayout)
      +void drawCentredGlyphLayout(GlyphLayout glyphLayout, float x, float y)
      +GlyphLayout getGlyphLayout(String text)
    }
  }

}

@enduml